{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\nconst priceStringToNumber = price => {\n  if (typeof price === \"string\") {\n    return parseFloat(price.replace(/\\D/g, ''));\n  }\n\n  return price;\n};\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    changed: false\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      state.changed = true;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          title: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = priceStringToNumber(existingItem.totalPrice) + priceStringToNumber(newItem.price);\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      state.changed = true;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = priceStringToNumber(existingItem.totalPrice) - priceStringToNumber(existingItem.price); //totalPrice : price finish\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/home/sogand/App React Native/demo-cafe/src/store/cart-slice.js"],"names":["createSlice","priceStringToNumber","price","parseFloat","replace","cartSlice","name","initialState","items","totalQuantity","changed","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","quantity","totalPrice","title","removeItemFromCart","filter","cartActions","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;;AAIA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AACnC,MAAG,OAAOA,KAAP,KAAiB,QAApB,EAA6B;AACzB,WAAOC,UAAU,CAACD,KAAK,CAACE,OAAN,CAAc,KAAd,EAAoB,EAApB,CAAD,CAAjB;AACH;;AACD,SAAOF,KAAP;AACH,CALD;;AAOA,MAAMG,SAAS,GAAGL,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,EADG;AAEVC,IAAAA,aAAa,EAAC,CAFJ;AAGVC,IAAAA,OAAO,EAAC;AAHE,GAFc;AAO5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAAEC,KAAF,EAASC,MAAT,EAAgB;AACzB,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACL,KAAN,CAAYU,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA7C,CAArB;AACAP,MAAAA,KAAK,CAACJ,aAAN;AAEAI,MAAAA,KAAK,CAACH,OAAN,GAAgB,IAAhB;;AACA,UAAI,CAACO,YAAL,EAAmB;AACfJ,QAAAA,KAAK,CAACL,KAAN,CAAYa,IAAZ,CAAiB;AACbD,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADC;AAEblB,UAAAA,KAAK,EAAEa,OAAO,CAACb,KAFF;AAGboB,UAAAA,QAAQ,EAAC,CAHI;AAIbC,UAAAA,UAAU,EAACR,OAAO,CAACb,KAJN;AAKbsB,UAAAA,KAAK,EAACT,OAAO,CAACS;AALD,SAAjB;AAOH,OARD,MAQK;AACDP,QAAAA,YAAY,CAACK,QAAb;AACAL,QAAAA,YAAY,CAACM,UAAb,GAA0BtB,mBAAmB,CAACgB,YAAY,CAACM,UAAd,CAAnB,GAA+CtB,mBAAmB,CAACc,OAAO,CAACb,KAAT,CAA5F;AACH;AACJ,KAnBO;;AAoBRuB,IAAAA,kBAAkB,CAACZ,KAAD,EAAOC,MAAP,EAAc;AAC5B,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACL,KAAN,CAAYU,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB;AACAP,MAAAA,KAAK,CAACJ,aAAN;AACAI,MAAAA,KAAK,CAACH,OAAN,GAAgB,IAAhB;;AACA,UAAIO,YAAY,CAACK,QAAb,KAA0B,CAA9B,EAAiC;AAC5BT,QAAAA,KAAK,CAACL,KAAN,GAAcK,KAAK,CAACL,KAAN,CAAYkB,MAAZ,CAAoBP,IAAD,IAASA,IAAI,CAACC,EAAL,KAAYA,EAAxC,CAAd;AACJ,OAFD,MAEK;AACDH,QAAAA,YAAY,CAACK,QAAb;AACAL,QAAAA,YAAY,CAACM,UAAb,GAA0BtB,mBAAmB,CAACgB,YAAY,CAACM,UAAd,CAAnB,GAA+CtB,mBAAmB,CAACgB,YAAY,CAACf,KAAd,CAA5F,CAFC,CAEyH;AAC7H;AACJ;;AA/BO;AAPkB,CAAD,CAA7B;AA4CA,OAAO,MAAMyB,WAAW,GAAGtB,SAAS,CAACuB,OAA9B;AAEP,eAAevB,SAAS,CAACwB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n\n\nconst priceStringToNumber = (price) => {\n    if(typeof price === \"string\"){\n        return parseFloat(price.replace(/\\D/g,''))\n    }\n    return price;\n}\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n      items: [],\n      totalQuantity:0,\n      changed:false,\n  },\n  reducers: {\n    addItemToCart (state, action){\n        const newItem = action.payload;\n        const existingItem = state.items.find(item => item.id === newItem.id);\n        state.totalQuantity++;\n\n        state.changed = true;\n        if (!existingItem) {\n            state.items.push({\n                id: newItem.id ,\n                price: newItem.price,\n                quantity:1,\n                totalPrice:newItem.price,\n                title:newItem.title\n            });\n        }else{\n            existingItem.quantity++;\n            existingItem.totalPrice = priceStringToNumber(existingItem.totalPrice) + priceStringToNumber(newItem.price);\n        }\n    },\n    removeItemFromCart(state,action){\n        const id = action.payload;\n        const existingItem = state.items.find(item => item.id === id);\n        state.totalQuantity--;\n        state.changed = true;\n        if (existingItem.quantity === 1) {\n             state.items = state.items.filter((item) =>item.id !== id);\n        }else{\n            existingItem.quantity--;\n            existingItem.totalPrice = priceStringToNumber(existingItem.totalPrice) - priceStringToNumber(existingItem.price);         //totalPrice : price finish\n        }\n    },\n  },\n});\n\n\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}